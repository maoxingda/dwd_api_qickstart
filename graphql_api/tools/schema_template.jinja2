import graphene
from jinja2 import Template
from graphql_api.constants.constant import TableTypes
from graphene.utils.str_converters import to_snake_case

from graphql_api.models import Table, Relationship
from graphql_api.tools.parser import parse

{% for obj in objects %}
class {{ obj.class_name }}(graphene.ObjectType):
    {% for field in obj.fields %}
    {{ field }} = graphene.Field(
        graphene.String,
        resolver=lambda parent, context: '{{ field }}'
    )
    {% endfor %}

    {% for child in obj.children %}
    {{ child.child_field_name }} = graphene.Field(
        {{ child.child_table_name }},
        resolver=lambda parent, context: {{ child.child_table_name }}()
    )
    {% endfor %}
{% endfor %}

{# 包装SQL字段 #}
{% for obj in objects %}
class {{ obj.class_name }}WithSQL(graphene.ObjectType):
    {{ obj.wrapper_class_field_name }} = graphene.Field(
        {{ obj.class_name }},
        resolver=lambda parent, context: {{ obj.class_name }}()
    )
    sql = graphene.String()
{% endfor %}

class Query(graphene.ObjectType):
{% for obj in objects %}
    {{ obj.wrapper_class_field_name }}_with_sql = graphene.Field(
        {{ obj.class_name }}WithSQL
    )

    def resolve_{{ obj.wrapper_class_field_name }}_with_sql(parent, context):
        tables = Table.objects.all()

        def get_table(table_name):
            for table in tables:
                if table.name == table_name:
                    return table

        # parse from tables and select columns from graphql context
        from_tables = parse(context.field_asts, tables)

        # cat sql
        i = 0
        from_clause = []
        select_columns = []
        for table_name, value in from_tables.items():
            table = get_table(table_name)
            parent_table = get_table(value['parent'])
            parent_table_name = value['parent']
            select_columns += [f'{column} as {column.replace(".", "_")}' for column in value['columns']]

            i += 1
            if i == 1:
                continue

            # query relationship from db
            relationships = Relationship.objects.filter(
                left_table_name__name=parent_table.name).filter(right_table_name__name=table.name)

            # WARN: make sure that：len(relationships) == 1
            assert len(relationships) == 1, f'({parent_table.name} ---> {table.name}), relationship not unique.'

            for relationship in relationships:
                table_fq = f'{table.table_type.lower()}.{table.name}'
                parent_table_fq = f'{parent_table.table_type.lower()}.{parent_table.name}'

                if f'{parent_table_fq} as {parent_table.alias}' not in from_clause:
                    from_clause.append(f'{parent_table_fq} as {parent_table.alias}')

                from_clause.append(relationship.join_type.lower().replace("_", " "))

                if f'{table_fq} as {table.alias}' not in from_clause:
                    from_clause.append(f'{table_fq} as {table.alias}')

                from_clause.append('on')

                from_clause.append(
                    Template(relationship.join_condition).render({'l': parent_table.alias, 'r': table.alias}))

        sql = f'select {", ".join(select_columns)} from {" ".join(from_clause)}'

        return UserOrdersWithSQL(sql=sql)
{% endfor %}
    hello = graphene.String(default_value='Hello World!')