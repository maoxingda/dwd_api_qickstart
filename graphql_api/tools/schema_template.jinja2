import graphene

from graphql_api.tools.schema_helper import resolve_func, MeicanObjectType

{# graphql objects definition #}
{% for obj in objects %}
class {{ obj.class_name }}(graphene.ObjectType):
    {% for child in obj.children -%}
    {{ child.child_field_name }} = graphene.Field(
        {{ child.child_table_name }},
        resolver=lambda _, __: {{ child.child_table_name }}()
    )
    {% endfor -%}

    {%- for field in obj.fields -%}
    {{ field }} = graphene.String(default_value='{{ field }}')
    {% endfor %}
{% endfor %}

{# wrapper sql & data field #}
{% for obj in objects %}
class {{ obj.class_name }}_(MeicanObjectType):
    {{ obj.wrapper_class_field_name }} = graphene.Field(
        {{ obj.class_name }},
        resolver=lambda _, __: {{ obj.class_name }}()
    )
{% endfor %}

{# graphql qeury entry points #}
class Query(graphene.ObjectType):
{%- for obj in objects %}
{%- if obj.table_type == 'DWD' %}
    {{ obj.wrapper_class_field_name }}_ = graphene.Field(
        {{ obj.class_name }}_,
        resolver=lambda _, info: resolve_func({{ obj.class_name }}_, info)
    )
{%- endif %}
{%- endfor %}

    hello = graphene.String(default_value='Hello World!', description='test only.')